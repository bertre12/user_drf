# Generated by Django 5.1.1 on 2024-09-25 17:36

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Level',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('Студент', 'Студент'), ('Менеджер', 'Менеджер'), ('Учитель', 'Учитель'), ('Админ', 'Админ')], max_length=100, null=True, unique=True, verbose_name='Статус')),
            ],
            options={
                'verbose_name': 'Уровень',
                'verbose_name_plural': 'Уровень',
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(max_length=255, verbose_name='ФИО')),
                ('image', models.ImageField(null=True, upload_to='static/images/', verbose_name='Фото')),
                ('password', models.CharField(max_length=255, verbose_name='Пароль')),
                ('phone', models.CharField(help_text='+375_________', max_length=255, verbose_name='№ телефона')),
                ('e_mail', models.EmailField(max_length=255, verbose_name='Электронная почта')),
                ('nickname_tg', models.CharField(max_length=255, null=True, verbose_name='Никнейм Telegram')),
                ('nickname_inst', models.CharField(max_length=255, null=True, verbose_name='Никнейм Instagram')),
                ('group_number', models.CharField(max_length=255, verbose_name='№ группы')),
                ('number_of_points', models.IntegerField(default=0, verbose_name='Количество баллов')),
                ('status', models.CharField(choices=[('Учится', 'Учится'), ('В академ. отпуске', 'В академ. отпуске'), ('Возврат', 'Возврат'), ('Закончил обучение', 'Закончил обучение')], max_length=100, verbose_name='Статус')),
                ('package', models.CharField(blank=True, max_length=255, null=True, verbose_name='Пакет')),
                ('internship', models.CharField(max_length=255, verbose_name='Стажировка')),
                ('session_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='Идентификатор сессии')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('level', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='student.level', verbose_name='Статус')),
            ],
            options={
                'verbose_name': 'Студент',
                'verbose_name_plural': 'Студенты',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
